/*
 * Copyright 2025 Contrast Security
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.contrast.labs.ai.mcp.contrast.mapper;

import com.contrast.labs.ai.mcp.contrast.FilterHelper;
import com.contrast.labs.ai.mcp.contrast.data.VulnLight;
import com.contrast.labs.ai.mcp.contrast.data.Vulnerability;
import com.contrast.labs.ai.mcp.contrast.hints.HintGenerator;
import com.contrast.labs.ai.mcp.contrast.sdkexstension.data.traces.SessionMetadata;
import com.contrast.labs.ai.mcp.contrast.sdkexstension.data.traces.TraceExtended;
import com.contrastsecurity.models.Trace;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Centralized mapper for transforming Contrast SDK Trace objects into MCP vulnerability representations.
 * Eliminates code duplication across multiple service methods by providing consistent transformation logic.
 */
@Component
public class VulnerabilityMapper {

    /**
     * Transform a Trace object into a lightweight vulnerability representation.
     * Used for list endpoints where full details aren't needed.
     *
     * @param trace The trace object from Contrast SDK
     * @return VulnLight object with essential vulnerability information
     */
    public VulnLight toVulnLight(Trace trace) {
        return new VulnLight(
            trace.getTitle(),
            trace.getRule(),
            trace.getUuid(),
            trace.getSeverity(),
            new ArrayList<>(), // Base Trace doesn't include session metadata
            FilterHelper.formatTimestamp(trace.getLastTimeSeen()),
            trace.getStatus(),
            FilterHelper.formatTimestamp(trace.getFirstTimeSeen()),
            FilterHelper.formatTimestamp(trace.getClosedTime()),
            extractEnvironments(trace)
        );
    }

    /**
     * Transform a TraceExtended object into a lightweight vulnerability representation.
     * Used for list endpoints where session metadata is available.
     *
     * @param trace The extended trace object from Contrast SDK with session metadata
     * @return VulnLight object with essential vulnerability information including session metadata
     */
    public VulnLight toVulnLight(TraceExtended trace) {
        return new VulnLight(
            trace.getTitle(),
            trace.getRule(),
            trace.getUuid(),
            trace.getSeverity(),
            trace.getSessionMetadata() != null ? trace.getSessionMetadata() : new ArrayList<>(),
            FilterHelper.formatTimestamp(trace.getLastTimeSeen()),
            trace.getStatus(),
            FilterHelper.formatTimestamp(trace.getFirstTimeSeen()),
            FilterHelper.formatTimestamp(trace.getClosedTime()),
            extractEnvironments(trace)
        );
    }

    /**
     * Transform a Trace object with additional context into a full vulnerability representation.
     * Used for detail endpoints where comprehensive information is needed.
     *
     * @param trace The trace object from Contrast SDK
     * @param context Additional context data (recommendation, stack libs, http request)
     * @return Vulnerability object with complete vulnerability information
     */
    public Vulnerability toFullVulnerability(Trace trace, VulnerabilityContext context) {
        String hint = HintGenerator.generateVulnerabilityFixHint(trace.getRule());

        return new Vulnerability(
            hint,
            trace.getUuid(),
            trace.getTitle(),
            trace.getRule(),
            context.recommendation(),
            context.stackLibs(),
            context.libraries(),
            context.httpRequest(),
            trace.getStatus(),
            trace.getFirstTimeSeen(),
            trace.getLastTimeSeen(),
            trace.getClosedTime()
        );
    }

    /**
     * Extract unique environments from trace servers.
     * Returns all environments the vulnerability has been seen in over time.
     *
     * @param trace The trace object containing server information
     * @return List of unique environment names (e.g., ["DEVELOPMENT", "PRODUCTION", "QA"])
     */
    private List<String> extractEnvironments(Trace trace) {
        if (trace.getServers() == null || trace.getServers().isEmpty()) {
            return new ArrayList<>();
        }
        return trace.getServers().stream()
                .map(server -> server.getEnvironment())
                .filter(env -> env != null && !env.isEmpty())
                .distinct()
                .sorted()
                .collect(Collectors.toList());
    }
}

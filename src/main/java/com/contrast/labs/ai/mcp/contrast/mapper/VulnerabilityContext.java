/*
 * Copyright 2025 Contrast Security
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.contrast.labs.ai.mcp.contrast.mapper;

import com.contrast.labs.ai.mcp.contrast.data.StackLib;
import com.contrast.labs.ai.mcp.contrast.sdkexstension.data.LibraryExtended;

import java.util.List;

/**
 * Context object containing additional data needed for full vulnerability transformation.
 * Used with VulnerabilityMapper.toFullVulnerability() to provide enrichment data
 * beyond what's available in the base Trace object.
 */
public record VulnerabilityContext(
    String recommendation,
    List<StackLib> stackLibs,
    List<LibraryExtended> libraries,
    String httpRequest
) {
    /**
     * Builder for VulnerabilityContext
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String recommendation;
        private List<StackLib> stackLibs;
        private List<LibraryExtended> libraries;
        private String httpRequest;

        public Builder recommendation(String recommendation) {
            this.recommendation = recommendation;
            return this;
        }

        public Builder stackLibs(List<StackLib> stackLibs) {
            this.stackLibs = stackLibs;
            return this;
        }

        public Builder libraries(List<LibraryExtended> libraries) {
            this.libraries = libraries;
            return this;
        }

        public Builder httpRequest(String httpRequest) {
            this.httpRequest = httpRequest;
            return this;
        }

        public VulnerabilityContext build() {
            return new VulnerabilityContext(recommendation, stackLibs, libraries, httpRequest);
        }
    }
}
